import{_ as s,c as e,o as i,ax as t}from"./chunks/framework.CJlX88Tx.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"electron/electron.md","filePath":"electron/electron.md","lastUpdated":null}'),n={name:"electron/electron.md"};function l(h,a,p,o,d,r){return i(),e("div",null,a[0]||(a[0]=[t(`<h4 id="主进程和渲染进程通信方式" tabindex="-1">主进程和渲染进程通信方式 <a class="header-anchor" href="#主进程和渲染进程通信方式" aria-label="Permalink to &quot;主进程和渲染进程通信方式&quot;">​</a></h4><h5 id="渲染进程到主进程-单向" tabindex="-1">渲染进程到主进程(单向) <a class="header-anchor" href="#渲染进程到主进程-单向" aria-label="Permalink to &quot;渲染进程到主进程(单向)&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 渲染进程ipcRenderer.send 发送消息，主进程使用 ipcMain.on  接收。</span></span></code></pre></div><h5 id="渲染进程到主进程-双向" tabindex="-1">渲染进程到主进程(双向) <a class="header-anchor" href="#渲染进程到主进程-双向" aria-label="Permalink to &quot;渲染进程到主进程(双向)&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">渲染进程ipcRenderer.invoke , 主进程使用ipcMain.handle</span></span></code></pre></div><h5 id="主进程到渲染进程-单向" tabindex="-1">主进程到渲染进程(单向) <a class="header-anchor" href="#主进程到渲染进程-单向" aria-label="Permalink to &quot;主进程到渲染进程(单向)&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">主进程win.webContents.send， 渲染进程使用ipcRenderer.on接收消息</span></span></code></pre></div><h5 id="渲染进程到渲染进程" tabindex="-1">渲染进程到渲染进程 <a class="header-anchor" href="#渲染进程到渲染进程" aria-label="Permalink to &quot;渲染进程到渲染进程&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 将主进程作为渲染器之间的消息代理。 这需要将消息从一个渲染器发送到主进程，然后主进程将消息转发到另一个渲染器</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> web技术</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(localStorage、sessionStorage、indexedDB)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 从主进程将一个 MessagePort 传递到两个渲染器。 这将允许在初始设置后渲染器之间直接进行通信</span></span></code></pre></div><h4 id="无跨域问题" tabindex="-1">无跨域问题 <a class="header-anchor" href="#无跨域问题" aria-label="Permalink to &quot;无跨域问题&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用node.js发送请求</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用electron net发送请求</span></span></code></pre></div>`,11)]))}const g=s(n,[["render",l]]);export{k as __pageData,g as default};
